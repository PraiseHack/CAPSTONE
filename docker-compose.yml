# version: '3'

x-airflow-common: &airflow-common
  image: apache/airflow:2.7.1

  environment:
    &airflow-common-env
    AIRFLOW_CORE_EXECUTOR: CeleryExecutor
    AIRFLOW_DATABASESQL_ALCHEMY_CONN: ${AIRFLOWDATABASE_SQL_ALCHEMY_CONN} # postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW_CONN_SOURCE_POSTGRES: postgresql+psycopg2://${SOURCE_PG_USER}:${SOURCE_PG_PASS}@$source-postgres/${SOURCE_PG_DB}
    AIRFLOW_CELERYRESULT_BACKEND: ${AIRFLOWCELERY_RESULT_BACKEND} # db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW_CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0 # redis://:redispass@redis:6379/0
    AIRFLOW_CORE_FERNET_KEY: ${FERNET_KEY}
    AIRFLOW_CORE_DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW_CORE_LOAD_EXAMPLES: 'false'
    AIRFLOW_CORE_TEST_CONNECTION: Enabled
    AIRFLOW_API_AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW_SCHEDULER_ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: |
      apache-airflow[google]
      apache-airflow-providers-google
      apache-airflow-providers-postgres
      psycopg2-binary 
      apache-airflow-providers-common-sql
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/config:/opt/airflow/config
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins

  user: "${AIRFLOW_UID:-50000}:0"

  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

services:
  # airflow postgres db
  airflow-postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./airflow/airflow_pg_data:/var/lib/postgresql/airflow/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    # networks:
    #   - source_data_network

  # source database for injestion
  source-postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: ${SOURCE_PG_DB}
      POSTGRES_USER: ${SOURCE_PG_USER}
      POSTGRES_PASSWORD: ${SOURCE_PG_PASS}
    volumes:
      - ./pg/source_pg_data:/var/lib/postgresql/src_db/data
      - ./pg/data:/data
      - ./pg/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5433:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SOURCE_PG_USER} -d ${SOURCE_PG_DB}"]
      # test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U alt_cap_user -d ecommerce"]
      interval: 10s
      timeout: 5s
      retries: 5
    # networks:
    #   - source_data_network

  # source database visualixation
  # metabase:
  #   image: metabase/metabase:latest
  #   depends_on:
  #     - source-postgres
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - source_data_network
  
  # redis
  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    # networks:
    #   - source_data_network
  
  # web server
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8084:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  # airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  # airflow workers
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # 
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  # initialization
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # function ver() {
        #   printf "%04d%04d%04d%04d" $${1//./ }
        # }
        # airflow_version=$$(AIRFLOW_LOGGING_LOGGING_LEVEL=INFO && gosu airflow airflow version)
        # airflow_version_comparable=$$(ver $${airflow_version})
        # min_airflow_version=2.2.0
        # min_airflow_version_comparable=$$(ver $${min_airflow_version})
        # if (( airflow_version_comparable < min_airflow_version_comparable )); then
        #   echo
        #   echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
        #   echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
        #   echo
        #   exit 1
        # fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      # _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "${AIRFLOW_UID:-50000}:0"
    volumes:
      - ./airflow:/sources
    # healthcheck:
    #   test: ["CMD", "airflow", "db", "check"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s
    # depends_on:
    #   airflow-postgres:
    #     condition: service_healthy
    #   redis:
    #     condition: service_healthy

  # airflow celerry UI
  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

# networks:
#   source_data_network:
#     driver: bridge

volumes:
  source_pg_data:
  airflow_pg_data: